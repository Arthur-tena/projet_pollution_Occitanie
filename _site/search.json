[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Accueil",
    "section": "",
    "text": "carte_occitanie.png\ngraphique.png\n\n\n\n Back to top"
  },
  {
    "objectID": "Villes/Toulouse.html",
    "href": "Villes/Toulouse.html",
    "title": "Toulouse",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport requests\nfrom pyproj import Proj, transform\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\nurl='https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_annuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=nom_dept,nom_com,insee_com,nom_station,nom_poll,valeur,unite,date_debut,x_l93,y_l93&outSR=4326&f=json'\n\n#Extraction des données\nresponse = requests.get(url)\nif response.status_code == 200:\n    data = response.json()\n\n    # Extraction des entités de la réponse JSON\n    features = data.get('features', [])\n\n    # Extraction des données pertinentes de chaque entité\n    records = []\n    for feature in features:\n        attributes = feature.get('attributes', {})\n        records.append(attributes)\n\n    # Création d'un DataFrame\n    df_data = pd.DataFrame(records)\n    df_data['valeur'].drop(0, inplace=True)\n    # Conversion des coordonnées Lambert 93 en latitude et longitude\n    in_proj = Proj(init='epsg:2154')  # Lambert 93\n    out_proj = Proj(init='epsg:4326')  # WGS84 (latitude, longitude)\n    \n    df_data['longitude'], df_data['latitude'] = transform(in_proj, out_proj, df_data['x_l93'].values, df_data['y_l93'].values)\n\n    # Conversion de la colonne 'date_debut' qui est en millisecondes\n    df_data['date_debut'] = pd.to_datetime(df_data['date_debut'], unit='ms')\n\n    # Liste des polluants à afficher\n    polluants = ['NO', 'NOX', 'O3', 'PM10', 'NO2','PM2.5']\n    # Boucle à travers les polluants pour créer les graphiques\nfor polluant in polluants:\n    #Regrouper les données de la ville de Montpellier\n    filt_data = df_data[(df_data['nom_com'] == 'TOULOUSE') & (df_data['nom_poll'] == polluant)]\n    filt_data = filt_data.sort_values(by='date_debut')\n    filt_data = filt_data.dropna()\n        \n    # Création d'un graphique\n    fig = px.scatter(\n        filt_data, x='date_debut', y='valeur',\n        color='nom_station', size='valeur', hover_name='date_debut',\n        title=f'Évolution de la pollution {polluant} à Toulouse',\n        labels={'valeur': f'Valeur {polluant} (ug.m-3)', 'date_debut': 'Année'}\n    )\n\n    # Relier les points pour chaque station\n    for nom_station in filt_data['nom_station'].unique():\n        trace_data = filt_data[filt_data['nom_station'] == nom_station]\n        fig.add_trace(go.Scatter(\n            x=trace_data['date_debut'],\n            y=trace_data['valeur'],\n            mode='lines',  \n            showlegend=False\n        ))\n    fig.show()\n\n\n/home/zack/anaconda3/lib/python3.11/site-packages/pyproj/crs/crs.py:141: FutureWarning:\n\n'+init=&lt;authority&gt;:&lt;code&gt;' syntax is deprecated. '&lt;authority&gt;:&lt;code&gt;' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n\n/home/zack/anaconda3/lib/python3.11/site-packages/pyproj/crs/crs.py:141: FutureWarning:\n\n'+init=&lt;authority&gt;:&lt;code&gt;' syntax is deprecated. '&lt;authority&gt;:&lt;code&gt;' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n\n/tmp/ipykernel_1008/2015181441.py:31: FutureWarning:\n\nThis function is deprecated. See: https://pyproj4.github.io/pyproj/stable/gotchas.html#upgrading-to-pyproj-2-from-pyproj-1\n\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Villes/Montpellier.html",
    "href": "Villes/Montpellier.html",
    "title": "Montpellier",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport requests\nfrom pyproj import Proj, transform\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\nurl='https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_annuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=nom_dept,nom_com,insee_com,nom_station,nom_poll,valeur,unite,date_debut,x_l93,y_l93&outSR=4326&f=json'\n\n#Extraction des données\nresponse = requests.get(url)\nif response.status_code == 200:\n    data = response.json()\n\n    # Extraction des entités de la réponse JSON\n    features = data.get('features', [])\n\n    # Extraction des données pertinentes de chaque entité\n    records = []\n    for feature in features:\n        attributes = feature.get('attributes', {})\n        records.append(attributes)\n\n    # Création d'un DataFrame\n    df_data = pd.DataFrame(records)\n    df_data['valeur'].dropna()\n\n    # Conversion de la colonne 'date_debut' qui est en millisecondes\n    df_data['date_debut'] = pd.to_datetime(df_data['date_debut'], unit='ms')\n\n    # Liste des polluants à afficher\n    polluants = ['NO', 'NOX', 'O3', 'PM10', 'NO2','PM2.5']\n    # Boucle à travers les polluants pour créer les graphiques\nfor polluant in polluants:\n    #Regrouper les données de la ville de Montpellier\n    filt_data = df_data[(df_data['nom_com'] == 'MONTPELLIER') & (df_data['nom_poll'] == polluant)]\n    filt_data = filt_data.sort_values(by='date_debut')\n    filt_data = filt_data.dropna()    \n\n        \n    # Création d'un graphique\n    fig = px.scatter(\n        filt_data, x='date_debut', y='valeur',\n        color='nom_station',hover_name='date_debut',\n        title=f'Évolution de la pollution {polluant} à Montpellier',\n        labels={'valeur': f'Valeur {polluant} (ug.m-3)', 'date_debut': 'Année'}\n    )\n\n    # Relier les points pour chaque station\n    for nom_station in filt_data['nom_station'].unique():\n        trace_data = filt_data[filt_data['nom_station'] == nom_station]\n        fig.add_trace(go.Scatter(\n            x=trace_data['date_debut'],\n            y=trace_data['valeur'],\n            mode='lines',  \n            showlegend=False\n        ))\n    fig.show()\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Villes/Gard.html",
    "href": "Villes/Gard.html",
    "title": "Gard",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport requests\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nurl='https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_annuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=nom_dept,nom_com,insee_com,nom_station,nom_poll,valeur,unite,date_debut,x_l93,y_l93&outSR=4326&f=json'\n\n#Extraction des données\nresponse = requests.get(url)\nif response.status_code == 200:\n    data = response.json()\n\n    # Extraction des entités de la réponse JSON\n    features = data.get('features', [])\n\n    # Extraction des données pertinentes de chaque entité\n    records = []\n    for feature in features:\n        attributes = feature.get('attributes', {})\n        records.append(attributes)\n\n    # Création d'un DataFrame\n    df = pd.DataFrame(records)\n    df['valeur'].dropna()\n    # Conversion de la colonne 'date_debut' qui est en millisecondes\n    df['date_debut'] = pd.to_datetime(df['date_debut'], unit='ms')\n# Liste des polluants à afficher\npolluants = ['NO', 'NOX', 'O3', 'PM10', 'NO2','PM2.5']\nfor polluant in polluants:\n    #Regrouper les données de la ville de Montpellier\n    filt_data = df[(df['nom_dept'] == 'GARD') & (df['nom_poll'] == polluant)]\n    filt_data = filt_data.sort_values(by='date_debut')\n    \n\n# Créer un graphique en ligne pour chaque polluant\nfor polluant in polluants:\n    fig = px.scatter(filt_data[filt_data['nom_poll'] == polluant], x='date_debut', y='valeur', \n                  title=f'Évolution de {polluant} au fil du temps dans le département du Gard',\n                  labels={'valeur':'Concentration de Polluant', 'date_debut': 'Date'})\n\n    fig.show()\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Villes/Pyrenees_Orientales.html",
    "href": "Villes/Pyrenees_Orientales.html",
    "title": "Pyrénées Orientales",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport requests\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nurl='https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_annuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=nom_dept,nom_com,insee_com,nom_station,nom_poll,valeur,unite,date_debut,x_l93,y_l93&outSR=4326&f=json'\n\n#Extraction des données\nresponse = requests.get(url)\nif response.status_code == 200:\n    data = response.json()\n\n    # Extraction des entités de la réponse JSON\n    features = data.get('features', [])\n\n    # Extraction des données pertinentes de chaque entité\n    records = []\n    for feature in features:\n        attributes = feature.get('attributes', {})\n        records.append(attributes)\n\n    # Création d'un DataFrame\n    df = pd.DataFrame(records)\n    df['valeur'].dropna()\n    # Conversion de la colonne 'date_debut' qui est en millisecondes\n    df['date_debut'] = pd.to_datetime(df['date_debut'], unit='ms')\n# Liste des polluants à afficher\npolluants = ['NO', 'NOX', 'O3', 'PM10', 'NO2','PM2.5']\nfor polluant in polluants:\n    #Regrouper les données de la ville de Montpellier\n    filt_data = df[(df['nom_dept'] == 'PYRENEES-ORIENTALES') & (df['nom_poll'] == polluant)]\n    filt_data = filt_data.sort_values(by='date_debut')\n    \n\n# Créer un graphique en ligne pour chaque polluant\nfor polluant in polluants:\n    fig = px.scatter(filt_data[filt_data['nom_poll'] == polluant], x='date_debut', y='valeur', \n                  title=f'Évolution de {polluant} au fil du temps dans le département des Pyrénées-Orientales',\n                  labels={'valeur':'Concentration de Polluant', 'date_debut': 'Date'})\n\n    fig.show()\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Carte/Carte.html",
    "href": "Carte/Carte.html",
    "title": "Carte",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "Villes/Gers.html",
    "href": "Villes/Gers.html",
    "title": "Gers",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport requests\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nurl='https://services9.arcgis.com/7Sr9Ek9c1QTKmbwr/arcgis/rest/services/mesures_occitanie_annuelle_poll_princ/FeatureServer/0/query?where=1%3D1&outFields=nom_dept,nom_com,insee_com,nom_station,nom_poll,valeur,unite,date_debut,x_l93,y_l93&outSR=4326&f=json'\n\n#Extraction des données\nresponse = requests.get(url)\nif response.status_code == 200:\n    data = response.json()\n\n    # Extraction des entités de la réponse JSON\n    features = data.get('features', [])\n\n    # Extraction des données pertinentes de chaque entité\n    records = []\n    for feature in features:\n        attributes = feature.get('attributes', {})\n        records.append(attributes)\n\n    # Création d'un DataFrame\n    df = pd.DataFrame(records)\n    df['valeur'].dropna()\n    # Conversion de la colonne 'date_debut' qui est en millisecondes\n    df['date_debut'] = pd.to_datetime(df['date_debut'], unit='ms')\n# Liste des polluants à afficher\npolluants = ['NO', 'NOX', 'O3', 'PM10', 'NO2','PM2.5']\nfor polluant in polluants:\n    #Regrouper les données de la ville de Montpellier\n    filt_data = df[(df['nom_dept'] == 'GERS') & (df['nom_poll'] == polluant)]\n    filt_data = filt_data.sort_values(by='date_debut')\n    \n\n# Créer un graphique en ligne pour chaque polluant\nfor polluant in polluants:\n    fig = px.scatter(filt_data[filt_data['nom_poll'] == polluant], x='date_debut', y='valeur', \n                  title=f'Évolution de {polluant} au fil du temps dans le département Gers',\n                  labels={'valeur':'Concentration de Polluant', 'date_debut': 'Date'})\n\n    fig.show()\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n\n\n Back to top"
  }
]
---
title: "Pollution en Occitanie"
author: "TENA LAHJIOUJ KHODRI ZHU"
format: 
 revealjs :
     theme: serif

---

# Problématique 
Comment exploiter des données pour mieux visualiser un problème actuel

# Introduction 
::: {.incremental}
- La pollution : une préoccupation majeure
- En Occitanie
- À l'échelle des départements
- À l'échelle des villes 
- Problèms rencontrés 
- Conclusion
:::
# En Occitanie 
## Graphiques généraux 
```{python,}
#| echo: false
#| code-summary: "Une évolution de la concentration des polluants en Occitanie"
# %%
import pandas as pd
import plotly.graph_objects as go

data = pd.read_csv("/Users/arthurtena/Documents/data/Mesure_annuelle_Region_Occitanie_Polluants_Principaux.csv")
df = pd.DataFrame(data)
columns_to_drop = ['code_station', 'typologie', 'influence', 'id_poll_ue', 'unite', 'metrique', 'date_fin', 'statut_valid']
df = df.drop(columns=columns_to_drop)
grouped_df = df.groupby(['date_debut', 'nom_poll'])['valeur'].sum().reset_index()
grouped_df = grouped_df.sort_values(by=['date_debut', 'nom_poll'])
grouped_df['date_debut'] = pd.to_datetime(grouped_df['date_debut'])
grouped_df['date_debut'] = grouped_df['date_debut'].dt.year

fig = go.FigureWidget()
polluants = ['NO','NO2','NOX','O3','PM10','PM2.5']
for polluant in polluants:
    trace_data = grouped_df[grouped_df["nom_poll"] == polluant]
    fig.add_trace(
        go.Scatter(
            x=trace_data["date_debut"],
            y=trace_data["valeur"],
            mode='lines',
            name=f"Polluant = {polluant}",
        )
    )
fig.update_layout(
    template="simple_white",
    title="Polluants en fonction de l'année",
    showlegend=True,
    xaxis_title="Année",
    yaxis_title="Fréquence normalisée en ug.m-3",
)


fig.show()
```

---
Comment nous y sommes parvenue
```{.python code-line-numbers="7,11,13" }
#| echo: true
# %%
import pandas as pd
import plotly.graph_objects as go

data = pd.read_csv("/Users/arthurtena/Documents/data/Mesure_annuelle_Region_Occitanie_Polluants_Principaux.csv")
df = pd.DataFrame(data)
columns_to_drop = ['code_station', 'typologie', 'influence', 'id_poll_ue', 'unite', 'metrique', 'date_fin', 'statut_valid']
df = df.drop(columns=columns_to_drop)
grouped_df = df.groupby(['date_debut', 'nom_poll'])['valeur'].sum().reset_index()
grouped_df = grouped_df.sort_values(by=['date_debut', 'nom_poll'])
grouped_df['date_debut'] = pd.to_datetime(grouped_df['date_debut'])
grouped_df['date_debut'] = grouped_df['date_debut'].dt.year

fig = go.FigureWidget()
polluants = sorted(grouped_df["nom_poll"].unique())
for polluant in polluants:
    trace_data = grouped_df[grouped_df["nom_poll"] == polluant]
    fig.add_trace(
        go.Scatter(
            x=trace_data["date_debut"],
            y=trace_data["valeur"],
            mode='lines',
            name=f"Polluant = {polluant}",
        )
    )
fig.update_layout(
    template="simple_white",
    title="Polluants en fonction de l'année",
    showlegend=True,
    xaxis_title="Polluants",
    yaxis_title="Fréquence normalisée",
)


fig.show()
```

## Carte 

# Par département 
On va prendre l'exemple de la Haute-Garonne 
## Haute-Garonne 

```{.python}
#| echo: true
# %%
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
pd.options.mode.chained_assignment= None

def plot_pollutant_evolution_annuelle(data_file, department, polluants):
    """Cette fonction prend en argument le fichier CSV, le département et la liste des polluants à afficher et affiche l'évolution de la concentration par station de chaque polluants """
    # Charger les données
    df = pd.read_csv(data_file)
    df['valeur'].fillna(0, inplace=True)
    # Afficher la liste des polluants présents dans le DataFrame
    liste_polluants = df['nom_poll'].unique()

    # Boucle à travers les polluants pour créer les graphiques
    for polluant in polluants:
        # Filtrer les données pour le polluant et le département spécifiés
        filt = df[(df['nom_dept'] == department) & (df['nom_poll'] == polluant)]
        filt = filt.sort_values(by='date_debut')

        # Convertir la colonne de dates au format mois-année
        filt['date_debut'] = pd.to_datetime(filt['date_debut']).dt.to_period('M').astype(str)

        # Créer un graphique interactif avec Plotly Express
        fig = px.scatter(
            filt, x='date_debut', y='valeur',
            color='nom_station', size='valeur', hover_name='date_debut',
            title=f'Évolution de la pollution {polluant} dans le {department}',
            labels={'valeur': f'Valeur {polluant} (ug.m-3)', 'date_debut': 'Année'}
        )

        # Ajouter des lignes reliant les points pour chaque station
        for nom_station in filt['nom_station'].unique():
            trace_data = filt[filt['nom_station'] == nom_station]
            fig.add_trace(go.Scatter(
                x=trace_data['date_debut'],
                y=trace_data['valeur'],
                mode='lines',  # Ajout de ligne pour relier les points
                showlegend=False
            ))
        fig.show()
```
---

```{python}
#| echo: false
# %%
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
pd.options.mode.chained_assignment= None

def plot_pollutant_evolution_annuelle(data_file, department, polluants):
    """Cette fonction prend en argument le fichier CSV, le département et la liste des polluants à afficher et affiche l'évolution de la concentration par station de chaque polluants """
    # Charger les données
    df = pd.read_csv(data_file)
    df['valeur'].fillna(0, inplace=True)
    # Afficher la liste des polluants présents dans le DataFrame
    liste_polluants = df['nom_poll'].unique()

    # Boucle à travers les polluants pour créer les graphiques
    for polluant in polluants:
        # Filtrer les données pour le polluant et le département spécifiés
        filt = df[(df['nom_dept'] == department) & (df['nom_poll'] == polluant)]
        filt = filt.sort_values(by='date_debut')

        # Convertir la colonne de dates au format mois-année
        filt['date_debut'] = pd.to_datetime(filt['date_debut']).dt.to_period('M').astype(str)

        # Créer un graphique interactif avec Plotly Express
        fig = px.scatter(
            filt, x='date_debut', y='valeur',
            color='nom_station', size='valeur', hover_name='date_debut',
            title=f'Évolution de la pollution {polluant} dans le {department}',
            labels={'valeur': f'Valeur {polluant} (ug.m-3)', 'date_debut': 'Année'}
        )

        # Ajouter des lignes reliant les points pour chaque station
        for nom_station in filt['nom_station'].unique():
            trace_data = filt[filt['nom_station'] == nom_station]
            fig.add_trace(go.Scatter(
                x=trace_data['date_debut'],
                y=trace_data['valeur'],
                mode='lines',  # Ajout de ligne pour relier les points
                showlegend=False
            ))
        fig.show()
plot_pollutant_evolution_annuelle("/Users/arthurtena/Documents/data/Mesure_annuelle_Region_Occitanie_Polluants_Principaux.csv","HAUTE-GARONNE",['PM2.5'])
```


# Quelques villes 
## Toulouse

# Problèmes rencontrés 

# Conclusion 
